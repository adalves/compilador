package analysis;

public interface ParserConstants
{
    int START_SYMBOL = 49;

    int FIRST_NON_TERMINAL    = 49;
    int FIRST_SEMANTIC_ACTION = 87;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7,  8, -1, -1 },
        { -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 11, 11, 11, 11 },
        { -1, -1, -1, -1, -1, -1, -1, 16, 14, -1, -1, -1, -1, -1, -1, 13, 17, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 18, 19, 23, 24, 22, -1, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, 25, -1, 25, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 26, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, 27, 27, -1, -1, -1, 26, -1, 26, -1, 26, -1, -1, -1, -1, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1, -1, 31, -1, 29, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, 35, 36 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 39, 39, 39, 39, 39, 39, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, 39, -1, -1, -1, -1, -1, -1, -1, 39, 39, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, 43, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 45, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 49, 49, 49, 49, 49, 49, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, 49, -1, -1, -1, -1, -1, -1, -1, 49, 49, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, -1, -1, 50, 51, -1, -1, -1, -1, -1, 52, -1, 52, 52, -1, -1, -1 },
        { -1, 53, 53, 53, 53, 53, 53, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, 53, -1, -1, -1, -1, -1, -1, -1, 56, 53, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 57, 57, 57, 57, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, 58, 58, 58, 59, 59, -1, -1, -1, -1, -1, 59, -1, 59, 59, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 61, 62, 63, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 64, 64, 64, 64, 64, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, -1, -1, -1, -1, -1, -1, -1, -1, 64, 64, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 67, 67, 67, 67, 67, 67, 67, -1, 65, 66, -1, -1, 67, -1, 67, 67, -1, -1, -1 },
        { -1, 68, 68, 68, 68, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, -1, -1, -1, -1, -1, -1, -1, -1, 68, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, 71, 71, 71, 71, 71, 71, -1, 71, 71, 69, 70, 71, -1, 71, 71, -1, -1, -1 },
        { -1, 72, 72, 72, 72, 72, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, 72, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 74, 74, 74, 74, 74, 74, 74, -1, 74, 74, 74, 74, 74, 73, 74, 74, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 75, 76, 77, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 78, 79, 80, 82, 83, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, -1, 85, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 50, 21, 59, 14 },
        {  0 },
        { 10, 51 },
        { 53, 44, 52 },
        { 51 },
        {  0 },
        { 55, 54 },
        { 45, 57 },
        { 46, 58 },
        {  2, 56 },
        { 42, 55 },
        {  0 },
        { 19 },
        { 16 },
        {  9 },
        { 23 },
        {  8 },
        { 17 },
        {  3 },
        {  4 },
        { 27 },
        { 15 },
        {  7 },
        {  5 },
        {  6 },
        { 61, 44, 60 },
        { 59 },
        {  0 },
        { 62 },
        { 64 },
        { 65 },
        { 68 },
        { 72 },
        { 55, 63, 73 },
        { 46 },
        { 47 },
        { 48 },
        { 20, 29, 55, 30 },
        { 22, 29, 66, 30 },
        { 73, 67 },
        { 42, 66 },
        {  0 },
        { 18, 73, 45, 59, 69, 71, 14 },
        {  0 },
        { 12, 73, 45, 59, 70 },
        { 69 },
        {  0 },
        { 13, 59 },
        { 11, 59, 28, 45, 73, 14 },
        { 75, 74 },
        { 35, 75, 74 },
        { 36, 75, 74 },
        {  0 },
        { 76 },
        { 27 },
        { 15 },
        { 37, 75 },
        { 79, 77 },
        { 78, 79 },
        {  0 },
        { 31 },
        { 32 },
        { 33 },
        { 34 },
        { 81, 80 },
        { 38, 81, 80 },
        { 39, 81, 80 },
        {  0 },
        { 83, 82 },
        { 40, 83, 82 },
        { 41, 83, 82 },
        {  0 },
        { 86, 84 },
        { 43, 85 },
        {  0 },
        { 24 },
        { 25 },
        { 26 },
        {  2 },
        {  3 },
        {  4 },
        {  7 },
        {  5 },
        {  6 },
        { 29, 73, 30 },
        { 38, 86 },
        { 39, 86 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "EOF", //"Era esperado fim de programa",
            "identificador", //"Era esperado identificador",
            "identificador", //"Era esperado cte_int",
            "constante inteira", //"Era esperado cte_real",
            "constante bin√°ria", //"Era esperado cte_bin",
            "constante hexadecimal", //"Era esperado cte_hex",
            "constante string", //"Era esperado cte_str",
            "bin", //"Era esperado bin",
            "bool", //"Era esperado bool",
            "def", //"Era esperado def",
            "do", //"Era esperado do",
            "elif", //"Era esperado elif",
            "else", //"Era esperado else",
            "end", //"Era esperado end",
            "false", //"Era esperado false",
            "floar", //"Era esperado float",
            "hexa", //"Era esperado hexa",
            "if", //"Era esperado if",
            "int", //"Era esperado int",
            "listen", //"Era esperado listen",
            "main", //"Era esperado main",
            "speak", //"Era esperado speak",
            "str", //"Era esperado str",
            "toInt", //"Era esperado toInt",
            "toBin", //"Era esperado toBin",
            "toHexa", //"Era esperado toHexa",
            "true", //"Era esperado true",
            "whileFalse", //"Era esperado whileFalse",
            "(", //"Era esperado \"(\"",
            ")", //"Era esperado \")\"",
            "==", //"Era esperado \"==\"",
            "!=", //"Era esperado \"!=\"",
            "<", //"Era esperado \"<\"",
            ">", //"Era esperado \">\"",
            "&", //"Era esperado \"&\"",
            "|", //"Era esperado \"|\"",
            "!", //"Era esperado \"!\"",
            "+", //"Era esperado \"+\"",
            "-", //"Era esperado \"-\"",
            "*", //"Era esperado \"*\"",
            "/", //"Era esperado \"/\"",
            ",", //"Era esperado \",\"",
            ".", //"Era esperado \".\"",
            ";", //"Era esperado \";\"",
            ":", //"Era esperado \":\"",
            "=", //"Era esperado \"=\"",
            "+=", //"Era esperado \"+=\"",
            "-=", //"Era esperado \"-=\"",
        "def main", //"<programa> inv√°lido",
        "def main", //"<declaracao> inv√°lido",
        "identificador", //"<declaracao_de_variaveis> inv√°lido",
        "identificador main", //"<declaracao_de_variaveis2> inv√°lido",
        "identificador", //"<variavel> inv√°lido",
        ": =", //"<variavel2> inv√°lido",
        "identificador", //"<lista_id> inv√°lido",
        ") , : operador  de  atribui√ß√£o", //"<lista_id2> inv√°lido",
        "tipo", //"<tipo> inv√°lido",
        "uma constante", //"<valor> inv√°lido",
        "identificador do if listen speak ", //"<lista_de_comandos> inv√°lido",
        "identificador do elif else end if listen speak whileFalse", //"<lista_de_comandos2> inv√°lido",
        "identificador do if listen speak", //"<comando> inv√°lido",
        "identificador", //"<atribuicao> inv√°lido",
        "operador  de  atribui√ß√£o", //"<operador> inv√°lido",
        "listen", //"<entrada> inv√°lido",
        "speak", //"<saida> inv√°lido",
        "uma express√£o", //"<lista_de_expressoes> inv√°lido",
        "uma express√£o", //"<lista_de_expressoes2> inv√°lido",
        "if", //"<selecao> inv√°lido",
        "elif else end", //"<elif> inv√°lido",
        "elif else end", //"<elif_repeat> inv√°lido",
        "else end", //"<else> inv√°lido",
        "do", //"<repeticao> inv√°lido",
        "uma express√£o", //"<expressao> inv√°lido",
        "uma express√£o", //"<expressao2> inv√°lido",
        "uma express√£o", //"<elemento> inv√°lido",
        "uma express√£o", //"<relacional> inv√°lido",
        "uma express√£o", //"<relacional2> inv√°lido",
        "uma express√£o", //"<operador_relacional> inv√°lido",
        "uma express√£o", //"<aritmetica> inv√°lido",
        "uma express√£o", //"<aritmetica2> inv√°lido",
        "uma express√£o", //"<termo> inv√°lido",
        "uma express√£o", //"<termo2> inv√°lido",
        "uma express√£o", // "<fator> inv√°lido",
        "uma express√£o", //"<fator2> inv√°lido",
        "uma express√£o", //"<fator3> inv√°lido",
        "uma express√£o", //"<membro> inv√°lido"
    };
}
